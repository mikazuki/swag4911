<?xml version="1.0" encoding="ASCII"?>
<metamodel:SWA xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:metamodel="http://www.example.org/metamodel" xsi:schemaLocation="http://www.example.org/metamodel metamodel/metamodel.ecore">
  <models name="swag49.model.map" isContainerManaged="true">
    <entities name="Action" persistenceSuperclass="true" persistenceListener="swag49.model.listener.ActionPersistenceEventEntityListener">
      <members name="startDate" type="java.util.Date">
        <column/>
      </members>
      <members name="duration" type="Long">
        <column/>
      </members>
      <members name="target" complexType="//@models.0/@entities.2" persistenceRelation="ManyToOne"/>
      <members name="player" complexType="//@models.0/@entities.1" persistenceRelation="ManyToOne"/>
      <members name="isAbortable" type="Boolean"/>
      <specialMethod>public java.util.Date getEndDate() {&#xA;        if (startDate == null || duration == null)&#xA;            return null;&#xA;&#xA;        return new java.util.Date(startDate.getTime() + duration);&#xA;    }</specialMethod>
    </entities>
    <entities name="Player">
      <members name="online" type="Boolean">
        <column/>
      </members>
      <members name="deleted" type="Boolean">
        <column/>
      </members>
      <members name="userId" type="String">
        <column/>
      </members>
      <members name="plays" complexType="//@models.0/@entities.11" persistenceRelation="ManyToOne"/>
      <members name="owns" complexType="//@models.0/@entities.3" hasMultipleValues="true" persistenceRelation="OneToMany" persistenceMappedBy="owner" persistenceOptional="true"/>
      <members name="troops" complexType="//@models.0/@entities.12" hasMultipleValues="true" persistenceRelation="OneToMany" persistenceMappedBy="owner" persistenceOptional="true"/>
      <members name="actions" complexType="//@models.0/@entities.0" hasMultipleValues="true" persistenceRelation="OneToMany" persistenceMappedBy="player" persistenceOptional="true"/>
      <members name="resources" complexType="//@models.0/@entities.4">
        <attributeOverride>
          <attributeOverrides name="amount_gold" column="production_gold"/>
          <attributeOverrides name="amount_stone" column="production_stone"/>
          <attributeOverrides name="amount_wood" column="production_wood"/>
          <attributeOverrides name="amount_crops" column="production_crops"/>
        </attributeOverride>
      </members>
      <members name="income" complexType="//@models.0/@entities.4">
        <attributeOverride>
          <attributeOverrides name="amount_gold" column="production_gold"/>
          <attributeOverrides name="amount_stone" column="production_stone"/>
          <attributeOverrides name="amount_wood" column="production_wood"/>
          <attributeOverrides name="amount_crops" column="production_crops"/>
        </attributeOverride>
      </members>
      <members name="upkeep" complexType="//@models.0/@entities.4">
        <attributeOverride>
          <attributeOverrides name="amount_gold" column="production_gold"/>
          <attributeOverrides name="amount_stone" column="production_stone"/>
          <attributeOverrides name="amount_wood" column="production_wood"/>
          <attributeOverrides name="amount_crops" column="production_crops"/>
        </attributeOverride>
      </members>
    </entities>
    <entities name="Tile">
      <members name="map" complexType="//@models.0/@entities.11" persistenceRelation="ManyToOne">
        <joincolumn name="mapId"/>
      </members>
      <members name="special" enumType="//@models.0/@enums.0"/>
      <members name="troops" complexType="//@models.0/@entities.12" hasMultipleValues="true" persistenceRelation="OneToMany" persistenceMappedBy="position" persistenceOptional="true"/>
      <members name="base" complexType="//@models.0/@entities.3" persistenceRelation="OneToOne" persistenceOptional="true"/>
      <embeddedId name="Id">
        <members name="mapId" type="Long"/>
        <members name="x" type="Integer"/>
        <members name="y" type="Integer"/>
        <specialConstructor>public Id(long mapId, int x, int y) {&#xA;&#x9;&#x9;&#x9;super();&#xA;&#x9;&#x9;&#x9;this.mapId = mapId;&#xA;&#x9;&#x9;&#x9;this.x = x;&#xA;&#x9;&#x9;&#x9;this.y = y;&#xA;&#x9;&#x9;}</specialConstructor>
      </embeddedId>
      <specialConstructor>&#x9;public Tile(Map map, int x, int y) {&#xA;&#x9;&#x9;this.map = map;&#xA;        this.id = new Id(map.getId(),x,y);&#xA;&#xA;//&#x9;&#x9;map.getConsistsOf().add(this);&#xA;&#x9;}</specialConstructor>
    </entities>
    <entities name="Base">
      <members name="home" type="Boolean">
        <column/>
      </members>
      <members name="owner" complexType="//@models.0/@entities.1" persistenceRelation="ManyToOne" persistenceMappedBy=""/>
      <members name="locatedOn" complexType="//@models.0/@entities.2" persistenceRelation="OneToOne" persistenceMappedBy=""/>
      <members name="consistsOf" complexType="//@models.0/@entities.7" hasMultipleValues="true" persistenceRelation="OneToMany" persistenceMappedBy="base" persistenceOptional="true"/>
      <members name="resourceProduction" complexType="//@models.0/@entities.4">
        <attributeOverride>
          <attributeOverrides name="amount_gold" column="production_gold"/>
          <attributeOverrides name="amount_stone" column="production_stone"/>
          <attributeOverrides name="amount_wood" column="production_wood"/>
          <attributeOverrides name="amount_crops" column="production_crops"/>
        </attributeOverride>
      </members>
      <specialConstructor>public Base(Tile tile) {&#xA;        this();&#xA;        this.locatedOn = tile;&#xA;    }</specialConstructor>
    </entities>
    <entities name="ResourceValue" persistenceEmbeddable="true" noDefaultConstructor="true">
      <members name="amount_gold" type="Integer"/>
      <members name="amount_stone" type="Integer"/>
      <members name="amount_wood" type="Integer"/>
      <members name="amount_crops" type="Integer"/>
      <specialConstructor> public ResourceValue() {&#xA;        amount_gold = 0;&#xA;        amount_stone = 0;&#xA;        amount_wood = 0;&#xA;        amount_crops = 0;&#xA;    }</specialConstructor>
      <specialConstructor>public ResourceValue(int wood, int crops, int gold, int stone) {&#xA;        amount_wood = wood;&#xA;        amount_crops = crops;&#xA;        amount_gold = gold;&#xA;        amount_stone = stone;&#xA;    }</specialConstructor>
      <specialConstructor>public ResourceValue(ResourceValue value) {&#xA;        amount_wood = value.getAmount_wood();&#xA;        amount_crops = value.getAmount_crops();&#xA;        amount_gold = value.getAmount_gold();&#xA;        amount_stone = value.getAmount_stone();&#xA;&#xA;    }</specialConstructor>
      <specialMethod>@Override&#xA;    public boolean equals(Object obj) {&#xA;        if (obj != null &amp;&amp; obj instanceof ResourceValue) {&#xA;            return this.amount_gold.equals(((ResourceValue) obj).amount_gold)&#xA;                    &amp;&amp; this.amount_stone&#xA;                    .equals(((ResourceValue) obj).amount_stone)&#xA;                    &amp;&amp; this.amount_wood&#xA;                    .equals(((ResourceValue) obj).amount_wood)&#xA;                    &amp;&amp; this.amount_crops&#xA;                    .equals(((ResourceValue) obj).amount_crops);&#xA;        } else {&#xA;            return false;&#xA;        }&#xA;    }</specialMethod>
      <specialMethod>@Override&#xA;    public int hashCode() {&#xA;        return amount_gold.hashCode() + amount_stone.hashCode()&#xA;                + amount_wood.hashCode() + amount_crops.hashCode();&#xA;    }</specialMethod>
    </entities>
    <entities name="BuildAction" superClass="//@models.0/@entities.0">
      <members name="concerns" complexType="//@models.0/@entities.6" persistenceRelation="ManyToOne"/>
    </entities>
    <entities name="Building" persistenceTableName="" specialID="@javax.persistence.EmbeddedId&#xA;    private Square.Id id = new Square.Id();">
      <members name="square" complexType="//@models.0/@entities.7" persistenceRelation="OneToOne">
        <persistenceCascadeType>CascadeType.MERGE</persistenceCascadeType>
        <joincolumns>
          <column name="baseId"/>
          <column name="position"/>
        </joincolumns>
      </members>
      <members name="type" complexType="//@models.0/@entities.8" persistenceRelation="ManyToOne"/>
      <members name="isOfLevel" complexType="//@models.0/@entities.9" persistenceRelation="ManyToOne"/>
      <members name="active" type="Boolean"/>
      <specialConstructor>public Building(Square square) {&#xA;        this.square = square;&#xA;        this.id = new Square.Id(square.getBase().getId(), square.getPosition());&#xA;&#xA;        //&#x9;square.setBuilding(this);&#xA;    }</specialConstructor>
      <specialMethod>public Square.Id getId() {&#xA;        return id;&#xA;    }</specialMethod>
    </entities>
    <entities name="Square">
      <members name="base" type="" complexType="//@models.0/@entities.3" persistenceRelation="ManyToOne">
        <joincolumn name="baseId"/>
      </members>
      <members name="building" complexType="//@models.0/@entities.6" persistenceRelation="OneToOne" persistenceMappedBy="square" persistenceOptional="true"/>
      <embeddedId name="Id">
        <members name="baseId" type="Long"/>
        <members name="position" type="Integer"/>
        <specialConstructor>public Id(long baseId, int position) {&#xA;            super();&#xA;            this.baseId = baseId;&#xA;            this.position = position;&#xA;        }&#xA;</specialConstructor>
      </embeddedId>
      <specialConstructor>public Square(Base base, int position) {&#xA;        this.base = base;&#xA;        this.id.baseId = base.getId();&#xA;        this.id.position = position;&#xA;&#xA;        base.getConsistsOf().add(this);&#xA;    }</specialConstructor>
      <specialMethod>public Integer getPosition() {&#xA;        return id.position;&#xA;    }</specialMethod>
    </entities>
    <entities name="BuildingType">
      <members name="name" type="String">
        <column/>
      </members>
      <members name="levels" complexType="//@models.0/@entities.9" hasMultipleValues="true" persistenceRelation="OneToMany">
        <persistenceCascadeType>CascadeType.ALL</persistenceCascadeType>
      </members>
    </entities>
    <entities name="BuildingLevel" superClass="//@models.0/@entities.10" persistenceTableName="">
      <members name="buildingType" complexType="//@models.0/@entities.8" persistenceRelation="ManyToOne">
        <joincolumn name="buildingTypeId"/>
      </members>
      <members name="resourceProduction" complexType="//@models.0/@entities.4">
        <attributeOverride>
          <attributeOverrides name="amount_gold" column="production_gold"/>
          <attributeOverrides name="amount_stone" column="production_stone"/>
          <attributeOverrides name="amount_wood" column="production_wood"/>
          <attributeOverrides name="amount_crops" column="production_crops"/>
        </attributeOverride>
      </members>
      <embeddedId name="Id">
        <members name="level" type="Integer"/>
        <members name="buildingTypeId" type="Long"/>
        <specialConstructor>public Id(int level, long buildingTypeId) {&#xA;&#x9;&#x9;&#x9;this.level = level;&#xA;&#x9;&#x9;&#x9;this.buildingTypeId = buildingTypeId;&#xA;&#x9;&#x9;}</specialConstructor>
      </embeddedId>
      <specialConstructor>public BuildingLevel(BuildingType buildingType, int level) {&#xA;&#x9;&#x9;this.buildingType = buildingType;&#xA;&#xA;&#x9;&#x9;this.id.buildingTypeId = buildingType.getId();&#xA;&#x9;&#x9;this.id.level = level;&#xA;&#xA;&#x9;&#x9;this.buildingType.getLevels().add(this);&#xA;&#x9;}</specialConstructor>
      <specialMethod>@Override&#xA;&#x9;public Integer getLevel() {&#xA;&#x9;&#x9;return id.level;&#xA;&#x9;}</specialMethod>
    </entities>
    <entities name="LevelBase" persistenceSuperclass="true" noID="true">
      <members name="upgradeDuration" type="Long">
        <column/>
      </members>
      <members name="upkeepCosts" complexType="//@models.0/@entities.4">
        <attributeOverride>
          <attributeOverrides name="amount_gold" column="production_gold"/>
          <attributeOverrides name="amount_stone" column="production_stone"/>
          <attributeOverrides name="amount_wood" column="production_wood"/>
          <attributeOverrides name="amount_crops" column="production_crops"/>
        </attributeOverride>
      </members>
      <members name="buildCosts" complexType="//@models.0/@entities.4">
        <attributeOverride>
          <attributeOverrides name="amount_gold" column="production_gold"/>
          <attributeOverrides name="amount_stone" column="production_stone"/>
          <attributeOverrides name="amount_wood" column="production_wood"/>
          <attributeOverrides name="amount_crops" column="production_crops"/>
        </attributeOverride>
      </members>
      <specialMethod>public abstract Integer getLevel();</specialMethod>
    </entities>
    <entities name="Map">
      <members name="maxUsers" type="Integer">
        <column/>
      </members>
      <members name="url" type="String">
        <column/>
      </members>
      <members name="consistsOf" complexType="//@models.0/@entities.2" hasMultipleValues="true" persistenceRelation="OneToMany" persistenceMappedBy="map" persistenceOptional="true"/>
    </entities>
    <entities name="Troop"/>
    <entities name="Statistic">
      <members name="name" type="String">
        <column/>
      </members>
      <members name="entries" complexType="//@models.0/@entities.14" hasMultipleValues="true" persistenceRelation="OneToMany" persistenceMappedBy="statistics" persistenceFetchType="FetchType.EAGER" persistenceOptional="true"/>
    </entities>
    <entities name="StatisticEntry" specialID="">
      <members name="statistic" complexType="//@models.0/@entities.13" persistenceRelation="ManyToOne">
        <joincolumn name="statisticId"/>
      </members>
      <members name="player" complexType="//@models.0/@entities.1" persistenceRelation="ManyToOne"/>
      <members name="score" type="Integer">
        <column/>
      </members>
      <embeddedId name="Id">
        <members name="statisticId" type="Long"/>
        <members name="ranking" type="Integer"/>
      </embeddedId>
      <specialConstructor>public StatisticEntry(Statistic statistic, int ranking) {&#xA;&#x9;&#x9;this.statistic = statistic;&#xA;&#x9;&#x9;this.id.statisticId = statistic.getId();&#xA;&#x9;&#x9;this.id.ranking = ranking;&#xA;&#xA;&#x9;&#x9;statistic.getEntries().add(this);&#xA;&#x9;}</specialConstructor>
    </entities>
    <enums name="ResourceType">
      <items value="STONE"/>
      <items value="WOOD"/>
      <items value="CROPS"/>
      <items value="GOLD"/>
      <items value="NONE"/>
    </enums>
  </models>
  <models name="swag49.model.user" isContainerManaged="true">
    <entities name="Address" persistenceEmbeddable="true" persistenceTableName="">
      <members name="state" type="String"/>
      <members name="city" type="String"/>
      <members name="postalCode" type="String"/>
      <members name="street" type="String"/>
    </entities>
    <entities name="MapLocation">
      <members name="url" type="String">
        <column persistenceUnique="true"/>
      </members>
      <members name="mapName" type="String"/>
    </entities>
    <entities name="User" persistenceTableName="SWAG_User">
      <members name="username" type="String">
        <column persistenceUnique="true" persistenceLength="50"/>
      </members>
      <members name="password" type="String">
        <column persistenceLength="50"/>
      </members>
      <members name="firstName" type="String">
        <column persistenceNullable="true" persistenceLength="255"/>
      </members>
      <members name="lastName" type="String">
        <column persistenceNullable="true" persistenceLength="100"/>
      </members>
      <members name="utcOffset" type="Integer">
        <column/>
      </members>
      <members name="mapLocations" complexType="//@models.1/@entities.1" hasMultipleValues="true" persistenceRelation="ManyToMany" persistenceMappedBy="" persistenceOptional="true"/>
      <members name="address" complexType="//@models.1/@entities.0"/>
    </entities>
    <daos daoFor="//@models.1/@entities.1" name="MapLocationDAO" persistenceInjection="Member"/>
    <daos daoFor="//@models.1/@entities.2" name="UserDAO"/>
  </models>
</metamodel:SWA>
