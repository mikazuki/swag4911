«IMPORT metamodel»

«EXTENSION template::GeneratorExtensions»

«DEFINE main FOR SWA»
	«EXPAND daoInterface FOR this»
	«EXPAND abstractDAO FOR this»
	«EXPAND generateModel FOREACH models»
«ENDDEFINE»

«DEFINE generateModel FOR Model»
	«EXPAND enumClass(name) FOREACH enums»
	«EXPAND entityClass(name) FOREACH entities»
	«EXPAND daoClass(name, isContainerManaged) FOREACH daos»
«ENDDEFINE»

«DEFINE enumClass(String modelName) FOR Enum»
	«FILE getClassFolder(modelName)+"/"+standardPackage()+"/"+modelPackage()+"/"+name+".java"»
		package «standardPackage()».«modelPackage()»;
		
		public enum «name» {
			«FOREACH items AS i SEPARATOR  ','»
				«i.value.toUpperCase()»
			«ENDFOREACH»
		}
	«ENDFILE»
«ENDDEFINE»

«DEFINE entityClass(String modelName) FOR Entity»
	«FILE getClassFolder(modelName)+"/"+standardPackage()+"/"+modelPackage()+"/"+name+".java"»
		package «standardPackage()».«modelPackage()»;
	
		«EXPAND entityClassAnnotation FOR this»
		«IF persistenceSuperclass == true»
			public abstract class «name» {
		«ELSE»
			«IF superClass == null»
				public class «name» {
			«ELSE»
				public class «name» extends «superClass.name» {
			«ENDIF»
		«ENDIF»
		
			«IF (specialID == null || specialID.length == 0) && noID == false»
				«EXPAND entityClassId FOR this»
			«ENDIF»
			«EXPAND entityClassMemberDefinition FOREACH members»
			
			«IF persistenceSuperclass == false && noDefaultConstructor == false»
				public «name»() {
				}
			«ENDIF»
			
			«FOREACH specialConstructor AS e-»
				«e»
			«ENDFOREACH»
			
			«IF noID == false»
				«IF (specialID == null || specialID.length == 0)»
					«EXPAND entityClassIdGetter FOR this»
					«EXPAND entityClassIdSetter FOR this»
				«ELSE»
					«specialID»
				«ENDIF»
			«ENDIF»
			
			«EXPAND entityClassMemberGetter FOREACH members»
			«EXPAND entityClassMemberSetter FOREACH members»
			«FOREACH specialMethod AS e-»
				«e»
			«ENDFOREACH»
		}
	«ENDFILE»
«ENDDEFINE»

«DEFINE entityClassAnnotation FOR Entity»
	«IF persistenceEmbeddable == true»
		@javax.persistence.Embeddable
	«ELSE»
		«IF mappedSupperClass == true»
			@javax.persistence.MappedSuperclass
		«ELSE»
			@javax.persistence.Entity
		«ENDIF»
		«IF persistenceTableName != null && persistenceTableName.length > 0»
			@javax.persistence.Table(name = "«persistenceTableName»")
		«ENDIF»
		«IF persistenceSuperclass == true»
			@javax.persistence.Inheritance(strategy = javax.persistence.InheritanceType.TABLE_PER_CLASS)
		«ENDIF»
		«IF persistenceListener != null»
			@javax.persistence.EntityListeners(«persistenceListener».class)
		«ENDIF»
	«ENDIF»
«ENDDEFINE»

«DEFINE entityClassId FOR Entity»
	«IF embeddedId != null»
		@javax.persistence.Embeddable
		public static class «embeddedId.name» implements java.io.Serializable {
			private static final long serialVersionUID = 1L;
			«EXPAND entityClassMemberDefinition FOREACH embeddedId.members»
			
			public «embeddedId.name»() {
			}
			
			«FOREACH embeddedId.specialConstructor AS e-»
				«e»
			«ENDFOREACH»
			
			«EXPAND entityClassMemberGetter FOREACH embeddedId.members»
			«EXPAND entityClassMemberSetter FOREACH embeddedId.members»
			
			@Override
			public int hashCode() {
				return «FOREACH embeddedId.members AS member SEPARATOR "+"-» «member.name».hashCode() 
					«ENDFOREACH-»;
			}
			
			@Override
			public boolean equals(Object obj) {
				if(obj != null && obj instanceof «embeddedId.name») {
					«embeddedId.name» other = («embeddedId.name») obj;
					return «FOREACH embeddedId.members AS member SEPARATOR "&&"-» 
						this.«member.name».equals(other.«member.name»)
					«ENDFOREACH-»;
				} else {
					return false;
				}
			}
		}
		
		@javax.persistence.EmbeddedId
		private «embeddedId.name» id = new «embeddedId.name»();
	«ELSEIF persistenceEmbeddable == false && superClass == null»
		@javax.persistence.Id
		«IF persistenceSuperclass == true»
			@javax.persistence.GeneratedValue(strategy = javax.persistence.GenerationType.TABLE)
		«ELSE»
			@javax.persistence.GeneratedValue(strategy = javax.persistence.GenerationType.AUTO)
		«ENDIF»
    	private Long id;
	«ENDIF»
«ENDDEFINE»

«DEFINE entityClassIdGetter FOR Entity»
	«IF embeddedId != null»
		public «embeddedId.name» getId() {
			return id;
		}
	«ELSEIF persistenceEmbeddable == false && superClass == null»
		public Long getId() {
			return id;
		}
	«ENDIF»
«ENDDEFINE»

«DEFINE entityClassIdSetter FOR Entity»
	«IF embeddedId != null»
		public void setId(«embeddedId.name» id) {
			this.id = id;
		}
	«ELSEIF persistenceEmbeddable == false && superClass == null»
		public void setId(Long id) {
			this.id = id;
		}
	«ENDIF»
«ENDDEFINE»

«DEFINE entityClassMemberDefinition FOR Member»
	«EXPAND entityClassMemberAnnotation FOR this»
	«memberVisibility(this)» «memberType(this)» «name»
		«IF complexType != null && hasMultipleValues == true-»
			= new java.util.HashSet<«complexType.name»>()
		«ENDIF-»
	;
«ENDDEFINE»

«DEFINE entityClassMemberAnnotation FOR Member»
	«IF persistenceTransient == true»
		@javax.persistence.Transient
	«ELSEIF complexType == null && hasMultipleValues == true»
			@javax.persistence.ElementCollection
	«ELSEIF enumType != null»
		@javax.persistence.Enumerated(javax.persistence.EnumType.STRING)
	«ELSEIF complexType != null && complexType.persistenceEmbeddable == true && persistenceRelation == PersistenceRelationType::none»
		@javax.persistence.Embedded
	«ELSEIF complexType != null && persistenceRelation != PersistenceRelationType::none»
		@javax.persistence.«persistenceRelation»(
		«IF persistenceOptional == false && persistenceRelation != PersistenceRelationType::OneToMany-»
			optional = false
		«ENDIF-»
		«IF persistenceOptional == false && persistenceRelation != PersistenceRelationType::OneToMany && persistenceMappedBy != null && persistenceMappedBy.length > 0-»
			,
		«ENDIF-»
		«IF persistenceMappedBy != null && persistenceMappedBy.length > 0-»
			mappedBy = "«persistenceMappedBy»"
		«ENDIF-»
		«IF ((persistenceOptional == false && persistenceRelation != PersistenceRelationType::OneToMany) || (persistenceMappedBy != null && persistenceMappedBy.length > 0)) 
			&& persistenceFetchType != PersistenceFetchType::none-»
			,
		«ENDIF-»
		«IF persistenceFetchType != PersistenceFetchType::none-»
			fetch = javax.persistence.«persistenceFetchType»
		«ENDIF-»
		«IF ((persistenceOptional == false && persistenceRelation != PersistenceRelationType::OneToMany) || (persistenceMappedBy != null && persistenceMappedBy.length > 0) || 
			persistenceFetchType != PersistenceFetchType::none) &&
			persistenceCascadeType != PersistenceCascadeType::none && !persistenceCascadeType.isEmpty-»
			,
		«ENDIF-»
		«IF persistenceCascadeType != PersistenceCascadeType::none && !persistenceCascadeType.isEmpty-»
			cascade = {«FOREACH persistenceCascadeType AS pc SEPARATOR ','-»
				javax.persistence.«pc-»«ENDFOREACH-»}
		«ENDIF-»)
	«ENDIF»
	«EXPAND getColumn FOR column-»
	«IF joincolumns == null-»
		«EXPAND getJoinColumn FOR joincolumn-»
	«ELSE-»
		@javax.persistence.JoinColumns(value = {
		«FOREACH joincolumns.column AS column SEPARATOR  ','-»
			«EXPAND getJoinColumn FOR column-»
		«ENDFOREACH-»})
	«ENDIF»
	«IF index != null»
		@org.hibernate.annotations.Index(name = "«index.name»")
	«ENDIF»
	«IF attributeOverride != null»
		@javax.persistence.AttributeOverrides({
		«EXPAND singleAttributeOverride FOREACH attributeOverride.attributeOverrides SEPARATOR ','-»
		})
	«ENDIF»
	«IF type == "java.util.Date"-»
		@javax.persistence.Temporal(javax.persistence.TemporalType.TIMESTAMP)
	«ENDIF»
«ENDDEFINE»

«DEFINE getJoinColumn FOR PersistenceJoinColumn»
	«IF this != null-»
		@javax.persistence.JoinColumn(name = "«name»", 
			insertable = «persistenceInsertable», updatable = «persistenceUpdateable»)
	«ENDIF-»
«ENDDEFINE»

«DEFINE getColumn FOR PersistenceColumn»
	«IF this != null»
		@javax.persistence.Column(
		«IF persistenceNullable == false-»
			nullable = «persistenceNullable-»	
		«ENDIF-»
		«IF persistenceNullable == false && persistenceUnique == true-»
			,
		«ENDIF-»
		«IF persistenceUnique == true-»
			unique = «persistenceUnique-»
		«ENDIF-»
		«IF (persistenceNullable == false || persistenceUnique == true) &&
			persistenceLength > 0-»
			,
		«ENDIF-»
		«IF persistenceLength > 0-»
			length = «persistenceLength-»
		«ENDIF-»
		)
	«ENDIF»
«ENDDEFINE»

«DEFINE singleAttributeOverride FOR PerstistenceAttributeOverride-»
	@javax.persistence.AttributeOverride(name = "«name»", column = @javax.persistence.Column(name = "«column»"))
«ENDDEFINE»

«DEFINE entityClassMemberGetter FOR Member»
	public «memberType(this)» get«name.toFirstUpper()»() {
		return «name»;
	}
«ENDDEFINE»

«DEFINE entityClassMemberSetter FOR Member»
	public void set«name.toFirstUpper()»(«memberType(this)» «name») {
		this.«name» = «name»;
	}
«ENDDEFINE»

«DEFINE daoInterface FOR SWA»
	«FILE commonClassSourceFolder()+"/"+standardPackage()+"/"+daoPackage()+"/DataAccessObject.java"»
		package «standardPackage()».«daoPackage()»;

		public interface DataAccessObject<T, PK> {

			public boolean contains(T model);
			public T create(T model);
			public void delete(T model);
			public T get(PK id);
			public java.util.List<T> queryByExample(T model);
			public T update(T model);
    		public void detach(T model);
		}
	«ENDFILE»
«ENDDEFINE»

«DEFINE abstractDAO FOR SWA»
	«FILE commonClassSourceFolder()+"/"+standardPackage()+"/"+daoPackage()+"/AbstractDataAccessObject.java"»
		package «standardPackage()».«daoPackage()»;

		import org.slf4j.Logger;
		import swag49.util.Log;
		
		import javax.persistence.EntityManager;
		import javax.persistence.TypedQuery;
		import javax.persistence.criteria.CriteriaBuilder;
		import javax.persistence.criteria.CriteriaQuery;
		import javax.persistence.criteria.Predicate;
		import javax.persistence.criteria.Root;
		import javax.persistence.metamodel.Attribute;
		import javax.persistence.metamodel.EntityType;
		import javax.persistence.metamodel.Metamodel;
		import java.lang.reflect.InvocationTargetException;
		import java.lang.reflect.Method;
		import java.util.Collections;
		import java.util.List;
		import java.util.Set;
		
		public abstract class AbstractDataAccessObject<T, PK> implements DataAccessObject<T, PK> {
		
		    @Log
		    private Logger log;
		
		    private final Class<T> modelClass;
		
		    public AbstractDataAccessObject(final Class<T> modelClass) {
		        this.modelClass = modelClass;
		    }
		
		    protected abstract EntityManager getEntityManager();
		
		    @Override
		    public boolean contains(T message) {
		        return getEntityManager().contains(message);
		    }
		
		    @Override
		    public T create(T message) {
		        return getEntityManager().merge(message);
		    }
		
		    public void detach(T model) {
		        getEntityManager().detach(model);
		    }
		
		    @Override
		    public void delete(T message) {
		        message = getEntityManager().merge(message);
		        getEntityManager().remove(message);
		    }
		
		    @Override
		    public T get(PK id) {
		        return getEntityManager().find(modelClass, id);
		    }
		
		    @SuppressWarnings({"unchecked"})
		    @Override
		    public List<T> queryByExample(T model) {
		
		        try {
		            return findByExample(model, modelClass);
		        } catch (Exception e) {
		            log.warn("error finding by example", e);
		            return Collections.emptyList();
		        }
		    }
		
		    @Override
		    public T update(T message) {
		        return getEntityManager().merge(message);
		    }
		
		    private <T> List<T> findByExample(T example, Class<T> clazz)
		            throws IllegalArgumentException, IllegalAccessException, InvocationTargetException, SecurityException,
		            NoSuchMethodException {
		        EntityManager em = getEntityManager();
		        CriteriaBuilder cb = em.getCriteriaBuilder();
		        CriteriaQuery<T> cq = cb.createQuery(clazz);
		        Root<T> r = cq.from(clazz);
		        Predicate p = cb.conjunction();
		        Metamodel mm = em.getMetamodel();
		        EntityType<T> et = mm.entity(clazz);
		        Set<Attribute<? super T, ?>> attrs = et.getAttributes();
		        for (Attribute<? super T, ?> a : attrs) {
		            String name = a.getName();
		            String javaName = a.getJavaMember().getName();
		            String getter = "get" + javaName.substring(0, 1).toUpperCase() + javaName.substring(1);
		            Method m = clazz.getMethod(getter, (Class<?>[]) null);
		            Object value = m.invoke(example, (Object[]) null);
		
		            if (value != null) {
		                if (!a.isCollection())
		                    p = cb.and(p, cb.equal(r.get(name), value));
		
		                if (a.isAssociation())
		                    r.fetch(name);
		            }
		        }
		        cq.select(r).where(p);
		        TypedQuery<T> query = em.createQuery(cq);
		        return query.getResultList();
		    }
		}

	«ENDFILE»
«ENDDEFINE»

«DEFINE daoClass(String modelName, Boolean isContainerManaged) FOR DAO»
	«FILE getClassFolder(modelName)+"/"+standardPackage()+"/"+daoPackage()+"/"+name+".java"»
		package «standardPackage()».«daoPackage()»;
		
		import «standardPackage()».«modelPackage()».«daoFor.name»;
		import org.springframework.stereotype.Repository;
		import org.springframework.transaction.annotation.Transactional;
		import javax.persistence.EntityManager;
		import javax.persistence.PersistenceContext;
	
		@Repository(value="«name.toFirstLower()»")
		«IF modelName == "swag49.model.user"-»
			@Transactional("swag49.user")
		«ELSE-»
			@Transactional("swag49.map")
		«ENDIF»
		public class «name» extends AbstractDataAccessObject<«daoFor.name», «pk»> {
			«IF modelName == "swag49.model.user"-»
    			@PersistenceContext(unitName = "swag49.user")
    		«ELSE-»
    			@PersistenceContext(unitName = "swag49.map")
    		«ENDIF»
    		private EntityManager em;

    		public «name»() {
        		super(«daoFor.name».class);
    		}

    		@Override
    		protected EntityManager getEntityManager() {
        		return em;
    		}
		}
	«ENDFILE»
«ENDDEFINE»

«DEFINE persistenceProperties(String modelName) FOR PersistenceProperties»
	«FILE classSourceFolder()+persistencePropertiesFolder()+"/persistence.xml"»
<persistence xmlns="http://java.sun.com/xml/ns/persistence"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://java.sun.com/xml/ns/persistence
    http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd" version="2.0">
   <persistence-unit name="«modelName»">
    	<properties>
  	 		«IF persistenceProvider == PersistenceProvider::MySQL-»
  	 		<property name="hibernate.connection.driver_class" value="com.mysql.jdbc.Driver"/>
  	 		«ELSEIF persistenceProvider == PersistenceProvider::PostgreSQL-»
  	 		<property name="hibernate.connection.driver_class" value="org.postgresql.Driver"/>
  	 		«ENDIF-»
  	 		«IF persistenceProvider == PersistenceProvider::MySQL-»
  	 		<property name="hibernate.connection.url" value="jdbc:mysql://localhost:3306/«databaseName»"/>
			«ELSEIF persistenceProvider == PersistenceProvider::PostgreSQL-»
  	 		<property name="hibernate.connection.url" value="jdbc:postgresql://localhost:5432/«databaseName»"/>
  	 		«ENDIF-»
   			<property name="hibernate.connection.username" value="«userName»" />
   			<property name="hibernate.connection.password" value="«password»" />
   			«IF persistenceProvider == PersistenceProvider::MySQL-»
  	 		<property name="hibernate.dialect" value="org.hibernate.dialect.MySQLInnoDBDialect" />
  	 		«ELSEIF persistenceProvider == PersistenceProvider::PostgreSQL-»
  	 		<property name="hibernate.dialect" value="org.hibernate.dialect.PostgreSQLDialect" />
  	 		«ENDIF-»
   			<property name="hibernate.show_sql" value="false" />
   			<property name="hibernate.hbm2ddl.auto" value="create"/>
   			<property name="javax.persistence.validation.mode" value="none"/>
   		</properties>
   </persistence-unit>
</persistence>
	«ENDFILE»
«ENDDEFINE»

«DEFINE persistenceUtil(String modelName) FOR Model»
	«FILE classSourceFolder()+"/"+standardPackage()+"/"+utilPackage()+"/"+"PersistenceHelper.java"»
		package «standardPackage()».«utilPackage()»;

		public class PersistenceHelper {

		private static PersistenceHelper _instance = null;
		private javax.persistence.EntityManagerFactory emf;
		private javax.persistence.EntityManager em;

		public PersistenceHelper() {
			emf = javax.persistence.Persistence.createEntityManagerFactory("swag");
			em = emf.createEntityManager();
		}

		public static PersistenceHelper getInstance() {
			if (_instance == null)
				_instance = new PersistenceHelper();

			return _instance;
		}

		public javax.persistence.EntityManager getEm() {
			return em;
		}

		}
	«ENDFILE»
«ENDDEFINE»