«IMPORT metamodel»

«EXTENSION template::GeneratorExtensions»

«DEFINE main FOR Model»
	«EXPAND enumClass FOREACH enums»
	«EXPAND entityClass FOREACH entities»
	«EXPAND daoInterface FOR this»
	«EXPAND daoClass(isContainerManaged) FOREACH daos»
	«EXPAND persistenceProperties(name) FOR persistence»
«ENDDEFINE»

«DEFINE enumClass FOR Enum»
	«FILE classSourceFolder()+"/"+standardPackage()+"/"+modelPackage()+"/"+name+".java"»
		package «standardPackage()».«modelPackage()»;
		
		public enum «name» {
			«FOREACH items AS i SEPARATOR  ','»
				«i.value.toUpperCase()»
			«ENDFOREACH»
		}
	«ENDFILE»
«ENDDEFINE»

«DEFINE entityClass FOR Entity»
	«FILE classSourceFolder()+"/"+standardPackage()+"/"+modelPackage()+"/"+name+".java"»
		package «standardPackage()».«modelPackage()»;
	
		«EXPAND entityClassAnnotation FOR this»
		«IF persistenceSuperclass == true»
			public abstract class «name» {
		«ELSE»
			«IF superClass == null»
				public class «name» {
			«ELSE»
				public class «name» extends «superClass.name» {
			«ENDIF»
		«ENDIF»
		
			«EXPAND entityClassId FOR this»
			«EXPAND entityClassMemberDefinition FOREACH members»
			
			«IF persistenceSuperclass == false»
				public «name»() {
				}
			«ENDIF»
			
			«EXPAND entityClassIdGetter FOR this»
			«EXPAND entityClassMemberGetter FOREACH members»
			«EXPAND entityClassIdSetter FOR this»
			«EXPAND entityClassMemberSetter FOREACH members»
		}
	«ENDFILE»
«ENDDEFINE»

«DEFINE entityClassAnnotation FOR Entity»
	«IF persistenceEmbeddable == true»
		@javax.persistence.Embeddable
	«ELSE»
		@javax.persistence.Entity
		«IF persistenceTableName != null && persistenceTableName.length > 0»
			@javax.persistence.Table(name = "«persistenceTableName»")
		«ENDIF»
		«IF persistenceSuperclass == true»
			@javax.persistence.Inheritance(strategy = javax.persistence.InheritanceType.TABLE_PER_CLASS)
		«ENDIF»
	«ENDIF»
«ENDDEFINE»

«DEFINE entityClassId FOR Entity»
	«IF embeddedId != null»
		@javax.persistence.Embeddable
		public class «embeddedId.name» implements java.io.Serializable {
			private static final long serialVersionUID = 1L;
			«EXPAND entityClassMemberDefinition FOREACH embeddedId.members»
			
			public «embeddedId.name»() {
			}
			
			«EXPAND entityClassMemberGetter FOREACH embeddedId.members»
			«EXPAND entityClassMemberSetter FOREACH embeddedId.members»
			
			@Override
			public int hashCode() {
				return «FOREACH embeddedId.members AS member SEPARATOR "+"-» «member.name».hashCode() 
					«ENDFOREACH-»;
			}
			
			@Override
			public boolean equals(Object obj) {
				if(obj != null && obj instanceof «embeddedId.name») {
					«embeddedId.name» other = («embeddedId.name») obj;
					return «FOREACH embeddedId.members AS member SEPARATOR "&&"-» 
						this.«member.name».equals(other.«member.name»)
					«ENDFOREACH-»;
				} else {
					return false;
				}
			}
		}
		
		@javax.persistence.EmbeddedId
		private «embeddedId.name» id = new «embeddedId.name»();
	«ELSEIF persistenceEmbeddable == false && superClass == null»
		@javax.persistence.Id
		«IF persistenceSuperclass == true»
			@javax.persistence.GeneratedValue(strategy = javax.persistence.GenerationType.TABLE)
		«ELSE»
			@javax.persistence.GeneratedValue(strategy = javax.persistence.GenerationType.AUTO)
		«ENDIF»
    	private Long id;
	«ENDIF»
«ENDDEFINE»

«DEFINE entityClassIdGetter FOR Entity»
	«IF embeddedId != null»
		public «embeddedId.name» getId() {
			return id;
		}
	«ELSEIF persistenceEmbeddable == false && superClass == null»
		public Long getId() {
			return id;
		}
	«ENDIF»
«ENDDEFINE»

«DEFINE entityClassIdSetter FOR Entity»
	«IF embeddedId != null»
		public void setId(«embeddedId.name» id) {
			this.id = id;
		}
	«ELSEIF persistenceEmbeddable == false && superClass == null»
		public void setId(Long id) {
			this.id = id;
		}
	«ENDIF»
«ENDDEFINE»

«DEFINE entityClassMemberDefinition FOR Member»
	«EXPAND entityClassMemberAnnotation FOR this»
	«memberVisibility(this)» «memberType(this)» «name»
		«IF complexType != null && hasMultipleValues == true-»
			= new java.util.HashSet<«complexType.name»>()
		«ENDIF-»
	;
«ENDDEFINE»

«DEFINE entityClassMemberAnnotation FOR Member»
	«IF persistenceTransient == true»
		@javax.persistence.Transient
	«ELSEIF complexType == null && hasMultipleValues == true»
			@javax.persistence.ElementCollection
	«ELSEIF enumType != null»
		@javax.persistence.Enumerated(javax.persistence.EnumType.STRING)
	«ELSEIF complexType != null && complexType.persistenceEmbeddable == true && persistenceRelation == PersistenceRelationType::none»
		@javax.persistence.Embedded
	«ELSEIF complexType != null && persistenceRelation != PersistenceRelationType::none»
		@javax.persistence.«persistenceRelation»(
		«IF persistenceOptional == false && persistenceRelation != PersistenceRelationType::OneToMany-»
			optional = false
		«ENDIF-»
		«IF persistenceOptional == false && persistenceRelation != PersistenceRelationType::OneToMany && persistenceMappedBy != null-»
			,
		«ENDIF-»
		«IF persistenceMappedBy != null && persistenceMappedBy.length > 0-»
			mappedBy = "«persistenceMappedBy»"
		«ENDIF-»
		«IF ((persistenceOptional == false && persistenceRelation != PersistenceRelationType::OneToMany) || (persistenceMappedBy != null && persistenceMappedBy.length > 0)) 
			&& persistenceFetchType != PersistenceFetchType::none-»
			,
		«ENDIF-»
		«IF persistenceFetchType != PersistenceFetchType::none-»
			fetch = javax.persistence.«persistenceFetchType»
		«ENDIF-»
		«IF ((persistenceOptional == false && persistenceRelation != PersistenceRelationType::OneToMany) || (persistenceMappedBy != null && persistenceMappedBy.length > 0) || 
			persistenceFetchType != PersistenceFetchType::none) &&
			persistenceCascadeType != PersistenceCascadeType::none && !persistenceCascadeType.isEmpty-»
			,
		«ENDIF-»
		«IF persistenceCascadeType != PersistenceCascadeType::none && !persistenceCascadeType.isEmpty-»
			cascade = {«FOREACH persistenceCascadeType AS pc SEPARATOR ','-»
				javax.persistence.«pc-»«ENDFOREACH-»}
		«ENDIF-»)
	«ENDIF»
	«IF column != null»
		@javax.persistence.Column(
		«IF column.persistenceNullable == false-»
			nullable = «column.persistenceNullable-»	
		«ENDIF-»
		«IF column.persistenceNullable == false && column.persistenceUnique == true-»
			,
		«ENDIF-»
		«IF column.persistenceUnique == true-»
			unique = «column.persistenceUnique-»
		«ENDIF-»
		«IF (column.persistenceNullable == false || column.persistenceUnique == true) &&
			column.persistenceLength > 0-»
			,
		«ENDIF-»
		«IF column.persistenceLength > 0-»
			length = «column.persistenceLength-»
		«ENDIF-»
		)
	«ENDIF»
	«IF joincolumn != null»
		@javax.persistence.JoinColumn(name = "«joincolumn.name»", 
			insertable = «joincolumn.persistenceInsertable», updatable = «joincolumn.persistenceUpdateable»)
	«ENDIF»
	«IF index != null»
		@org.hibernate.annotations.Index(name = "«index.name»")
	«ENDIF»
«ENDDEFINE»

«DEFINE entityClassMemberGetter FOR Member»
	public «memberType(this)» get«name.toFirstUpper()»() {
		return «name»;
	}
«ENDDEFINE»

«DEFINE entityClassMemberSetter FOR Member»
	public void set«name.toFirstUpper()»(«memberType(this)» «name») {
		this.«name» = «name»;
	}
«ENDDEFINE»

«DEFINE daoInterface FOR Model»
	«FILE classSourceFolder()+"/"+standardPackage()+"/"+daoPackage()+"/DataAccessObject.java"»
		package «standardPackage()».«daoPackage()»;
	
		public interface DataAccessObject<T> {
		
			public T get(Long id);
			public T create(T model);
			public T update(T model);
			public void delete(T model);
			public boolean contains(T model);
			
		}
	«ENDFILE»
«ENDDEFINE»

«DEFINE daoClass(Boolean isContainerManaged) FOR DAO»
	«FILE classSourceFolder()+"/"+standardPackage()+"/"+daoPackage()+"/"+name+".java"»
		package «standardPackage()».«daoPackage()»;
		
		import «standardPackage()».«modelPackage()».«daoFor.name»;
	
		«IF isContainerManaged == true»
			@org.springframework.stereotype.Repository(value = "«daoFor.name.toLowerCase()»DAO")
		«ENDIF»
		public class «name» implements DataAccessObject<«daoFor.name»> {
		
			«IF persistenceInjection == PersistenceInjection::Member || 
				isContainerManaged == true»
				@javax.persistence.PersistenceContext
			«ENDIF»
			private javax.persistence.EntityManager em;
			
			«IF this.persistenceInjection == PersistenceInjection::Constructor»
				public «name»(javax.persistence.EntityManager em) {
					this.em = em;
				}
			«ELSE»
				public «name»() {
				}
			«ENDIF»
		
			«EXPAND getMethodForDao(isContainerManaged) FOR this»
			«EXPAND createMethodForDao(isContainerManaged) FOR this»
			«EXPAND updateMethodForDao(isContainerManaged) FOR this»
			«EXPAND deleteMethodForDao(isContainerManaged) FOR this»
			«EXPAND containsMethodForDao(isContainerManaged) FOR this»
			
		}
	«ENDFILE»
«ENDDEFINE»

«DEFINE getMethodForDao(Boolean isContainerManaged) FOR DAO»
	public «daoFor.name» get(Long id) {
		return em.find(«daoFor.name».class, id);
	}
«ENDDEFINE»

«DEFINE createMethodForDao(Boolean isContainerManaged) FOR DAO»
	«IF isContainerManaged == true»
		@org.springframework.transaction.annotation.Transactional
	«ENDIF»
	public «daoFor.name» create(«daoFor.name» «daoFor.name.toLowerCase()») {
		«daoFor.name» temp = null;
		«IF isContainerManaged == false»
			«EXPAND beginTransactionForDaoMethod FOR this»
		«ENDIF»
		temp = em.merge(«daoFor.name.toLowerCase()»);
		«IF isContainerManaged == false»
			«EXPAND endTransactionForDaoMethod FOR this»
		«ENDIF»
		return temp;
	}
«ENDDEFINE»

«DEFINE updateMethodForDao(Boolean isContainerManaged) FOR DAO»
	«IF isContainerManaged == true»
		@org.springframework.transaction.annotation.Transactional
	«ENDIF»
	public «daoFor.name» update(«daoFor.name» «daoFor.name.toLowerCase()») {
		«daoFor.name» temp = null;
		«IF isContainerManaged == false»
			«EXPAND beginTransactionForDaoMethod FOR this»
		«ENDIF»
		temp = em.merge(«daoFor.name.toLowerCase()»);
		«IF isContainerManaged == false»
			«EXPAND endTransactionForDaoMethod FOR this»
		«ENDIF»
		return temp;
	}
«ENDDEFINE»

«DEFINE deleteMethodForDao(Boolean isContainerManaged) FOR DAO»
	«IF isContainerManaged == true»
		@org.springframework.transaction.annotation.Transactional
	«ENDIF»
	public void delete(«daoFor.name» «daoFor.name.toLowerCase()») {
		«IF isContainerManaged == false»
			«EXPAND beginTransactionForDaoMethod FOR this»
		«ENDIF»
		em.remove(«daoFor.name.toLowerCase()»);
		«IF isContainerManaged == false»
			«EXPAND endTransactionForDaoMethod FOR this»
		«ENDIF»
	}
«ENDDEFINE»

«DEFINE containsMethodForDao(Boolean isContainerManaged) FOR DAO»
	public boolean contains(«daoFor.name» «daoFor.name.toLowerCase()») {
		return em.contains(«daoFor.name.toLowerCase()»);
	}
«ENDDEFINE»

«DEFINE beginTransactionForDaoMethod FOR DAO»
	javax.persistence.EntityTransaction tx = em.getTransaction();
	tx.begin();
«ENDDEFINE»

«DEFINE endTransactionForDaoMethod FOR DAO»
	tx.commit();
«ENDDEFINE»

«DEFINE persistenceProperties(String modelName) FOR PersistenceProperties»
	«FILE classSourceFolder()+persistencePropertiesFolder()+"/persistence.xml"»
<persistence xmlns="http://java.sun.com/xml/ns/persistence"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://java.sun.com/xml/ns/persistence
    http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd" version="2.0">
   <persistence-unit name="«modelName»">
    	<properties>
  	 		«IF persistenceProvider == PersistenceProvider::MySQL-»
  	 		<property name="hibernate.connection.driver_class" value="com.mysql.jdbc.Driver"/>
  	 		«ELSEIF persistenceProvider == PersistenceProvider::PostgreSQL-»
  	 		<property name="hibernate.connection.driver_class" value="org.postgresql.Driver"/>
  	 		«ENDIF-»
  	 		«IF persistenceProvider == PersistenceProvider::MySQL-»
  	 		<property name="hibernate.connection.url" value="jdbc:mysql://localhost:3306/«databaseName»"/>
			«ELSEIF persistenceProvider == PersistenceProvider::PostgreSQL-»
  	 		<property name="hibernate.connection.url" value="jdbc:postgresql://localhost:5432/«databaseName»"/>
  	 		«ENDIF-»
   			<property name="hibernate.connection.username" value="«userName»" />
   			<property name="hibernate.connection.password" value="«password»" />
   			«IF persistenceProvider == PersistenceProvider::MySQL-»
  	 		<property name="hibernate.dialect" value="org.hibernate.dialect.MySQLInnoDBDialect" />
  	 		«ELSEIF persistenceProvider == PersistenceProvider::PostgreSQL-»
  	 		<property name="hibernate.dialect" value="org.hibernate.dialect.PostgreSQLDialect" />
  	 		«ENDIF-»
   			<property name="hibernate.show_sql" value="false" />
   			<property name="hibernate.hbm2ddl.auto" value="create"/>
   			<property name="javax.persistence.validation.mode" value="none"/>
   		</properties>
   </persistence-unit>
</persistence>
	«ENDFILE»
«ENDDEFINE»